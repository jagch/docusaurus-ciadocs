"use strict";(self.webpackChunkdocusaurus_ciadocs=self.webpackChunkdocusaurus_ciadocs||[]).push([[8659],{3905:(e,i,o)=>{o.d(i,{Zo:()=>d,kt:()=>m});var a=o(7294);function n(e,i,o){return i in e?Object.defineProperty(e,i,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[i]=o,e}function s(e,i){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);i&&(a=a.filter((function(i){return Object.getOwnPropertyDescriptor(e,i).enumerable}))),o.push.apply(o,a)}return o}function t(e){for(var i=1;i<arguments.length;i++){var o=null!=arguments[i]?arguments[i]:{};i%2?s(Object(o),!0).forEach((function(i){n(e,i,o[i])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):s(Object(o)).forEach((function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(o,i))}))}return e}function r(e,i){if(null==e)return{};var o,a,n=function(e,i){if(null==e)return{};var o,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)o=s[a],i.indexOf(o)>=0||(n[o]=e[o]);return n}(e,i);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)o=s[a],i.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=a.createContext({}),c=function(e){var i=a.useContext(l),o=i;return e&&(o="function"==typeof e?e(i):t(t({},i),e)),o},d=function(e){var i=c(e.components);return a.createElement(l.Provider,{value:i},e.children)},p={inlineCode:"code",wrapper:function(e){var i=e.children;return a.createElement(a.Fragment,{},i)}},u=a.forwardRef((function(e,i){var o=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=c(o),m=n,v=u["".concat(l,".").concat(m)]||u[m]||p[m]||s;return o?a.createElement(v,t(t({ref:i},d),{},{components:o})):a.createElement(v,t({ref:i},d))}));function m(e,i){var o=arguments,n=i&&i.mdxType;if("string"==typeof e||n){var s=o.length,t=new Array(s);t[0]=u;var r={};for(var l in i)hasOwnProperty.call(i,l)&&(r[l]=i[l]);r.originalType=e,r.mdxType="string"==typeof e?e:n,t[1]=r;for(var c=2;c<s;c++)t[c]=o[c];return a.createElement.apply(null,t)}return a.createElement.apply(null,o)}u.displayName="MDXCreateElement"},3346:(e,i,o)=>{o.r(i),o.d(i,{assets:()=>l,contentTitle:()=>t,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var a=o(7462),n=(o(7294),o(3905));const s={},t="Principios de Dise\xf1o de Servicios",r={unversionedId:"cia-funciones/lineamientos-para-dise\xf1o-de-apis/principios-de-dise\xf1o-de-servicios",id:"cia-funciones/lineamientos-para-dise\xf1o-de-apis/principios-de-dise\xf1o-de-servicios",title:"Principios de Dise\xf1o de Servicios",description:"Un servicio se refiere a la funcionalidad expuesta como un API.",source:"@site/docs/cia-funciones/lineamientos-para-dise\xf1o-de-apis/principios-de-dise\xf1o-de-servicios.md",sourceDirName:"cia-funciones/lineamientos-para-dise\xf1o-de-apis",slug:"/cia-funciones/lineamientos-para-dise\xf1o-de-apis/principios-de-dise\xf1o-de-servicios",permalink:"/docusaurus-ciadocs/docs/cia-funciones/lineamientos-para-dise\xf1o-de-apis/principios-de-dise\xf1o-de-servicios",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cia-funciones/lineamientos-para-dise\xf1o-de-apis/principios-de-dise\xf1o-de-servicios.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Lineamientos para el Dise\xf1o de APIs",permalink:"/docusaurus-ciadocs/docs/cia-funciones/lineamientos-para-dise\xf1o-de-apis/lineamientos-de-dise\xf1o-de-apis"},next:{title:"Guias",permalink:"/docusaurus-ciadocs/docs/category/guias"}},l={},c=[{value:"Bajo Acoplamiento",id:"bajo-acoplamiento",level:2},{value:"Encapsulaci\xf3n",id:"encapsulaci\xf3n",level:2},{value:"Estabilidad",id:"estabilidad",level:2},{value:"Reusabilidad",id:"reusabilidad",level:2},{value:"Basado en Contratos",id:"basado-en-contratos",level:2},{value:"Consistencia",id:"consistencia",level:2},{value:"Externalizable",id:"externalizable",level:2},{value:"Facilidad de Consumo",id:"facilidad-de-consumo",level:2}],d={toc:c};function p(e){let{components:i,...o}=e;return(0,n.kt)("wrapper",(0,a.Z)({},d,o,{components:i,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"principios-de-dise\xf1o-de-servicios"},"Principios de Dise\xf1o de Servicios"),(0,n.kt)("p",null,"Un servicio se refiere a la funcionalidad expuesta como un API."),(0,n.kt)("p",null,"Esta secci\xf3n resume los principios b\xe1sicos de dise\xf1o de servicios que deben utilizarse a la hora de dise\xf1ar APIs tanto externas como internas."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#bajo-acoplamiento"},"Bajo Acoplamiento")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#encapsulaci%C3%B3n"},"Encapsulaci\xf3n")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#estabilidad"},"Estabilidad")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#reusabilidad"},"Reusabilidad")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#basado-en-contratos"},"Basado en Contratos")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#consistencia"},"Consistencia")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#externalizable"},"Externalizable")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#facilidad-de-consumo"},"Facilidad de Consumo"))),(0,n.kt)("h2",{id:"bajo-acoplamiento"},"Bajo Acoplamiento"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Los servicios y los consumidores deben estar desacoplados entre s\xed.")),(0,n.kt)("p",null,"Una forma de medir el acoplamiento entre dos componentes es a trav\xe9s de su nivel de interdependencia. Este principio se  enfoca en el dise\xf1o de contratos de servicio con un \xe9nfasis en reducir las dependencias entre el productor y consumidor del servicio."),(0,n.kt)("p",null,"El principio de Bajo Acoplamiento promueve independencia en el dise\xf1o y evoluci\xf3n de la l\xf3gica de un servicio pero a la vez pensando en la interoperabilidad con los consumidores."),(0,n.kt)("p",null,"Este principio implica lo siguiente:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"El contrato de servicio no debe exponer detalles de su implementaci\xf3n."),(0,n.kt)("li",{parentName:"ul"},"El contrato de un servicio puede evolucionar sin impactar a los consumidores existentes."),(0,n.kt)("li",{parentName:"ul"},"El servicio de un dominio en particular puede evolucionar independientemente de otros dominios.")),(0,n.kt)("h2",{id:"encapsulaci\xf3n"},"Encapsulaci\xf3n"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"El dominio de un servicio solo puede acceder a la data y funcionalidad de otro dominio a trav\xe9s de un contrato de servicio.")),(0,n.kt)("p",null,"Un servicio expone una funcionalidad que comprende la funcionalidad y los datos que posee e implementa, as\xed como la funcionalidad y los datos de los que depende y que no posee. Este principio defiende que cualquier funcionalidad o datos de los que dependa un servicio y que no sean de su propiedad deben ser accedidos \xfanicamente a trav\xe9s de contratos de servicios."),(0,n.kt)("p",null,"Este principio implica lo siguiente:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Un servicio tiene un l\xedmite de aislamiento claro: un alcance claro de propiedad en t\xe9rminos de funcionalidad y datos"),(0,n.kt)("li",{parentName:"ul"},"Un servicio no puede exponer los datos que no posee directamente")),(0,n.kt)("h2",{id:"estabilidad"},"Estabilidad"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Los contratos de servicio deben ser estables.")),(0,n.kt)("p",null,"Los servicios deben dise\xf1arse de tal manera que el contrato que exponen sea v\xe1lido para los clientes el mayor tiemp oposible. En caso de que el contrato de servicio deba evolucionar de manera incompatible para un consumidor existente, debe ser comunicado al consumidor impactado oportunamente."),(0,n.kt)("p",null,"Este principio implica lo siguiente:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"La funcionalidad adicional debe introducirse de manera que no afecte a los consumidores existentes."),(0,n.kt)("li",{parentName:"ul"},"Las pol\xedticas de obsolescencia y migraci\xf3n deben establecerse claramente para establecer las expectativas de los consumidores.")),(0,n.kt)("h2",{id:"reusabilidad"},"Reusabilidad"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Los servicios deben ser dise\xf1ados para ser potencialmente reutilizables por m\xfaltiples consumidores y bajo m\xfaltiples contextos.")),(0,n.kt)("p",null,"El objetivo principal de una capa de integraci\xf3n es permitir que las aplicaciones se desarrollen de forma r\xe1pida y rentable mediante el uso y la combinaci\xf3n de servicios. Esto es posible solo si los contratos de servicio se han desarrollado con flexibilidad para m\xfaltiples casos de uso y m\xfaltiples consumidores. Este principio aboga por que los servicios se desarrollen de una manera que les permita ser utilizados por m\xfaltiples consumidores y en m\xfaltiples contextos, algunos de los cuales pueden evolucionar con el tiempo."),(0,n.kt)("p",null,"Este principio implica lo siguiente:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Un contrato de servicio debe dise\xf1arse no solo para el contexto inmediato, sino tambi\xe9n con soporte y/o extensibilidad para ser utilizado por m\xfaltiples consumidores en diferentes contextos."),(0,n.kt)("li",{parentName:"ul"},"Es posible que un contrato de servicio deba evolucionar gradualmente para admitir m\xfaltiples contextos y consumidores a lo largo del tiempo.")),(0,n.kt)("h2",{id:"basado-en-contratos"},"Basado en Contratos"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Data y funcionalidad solo debe ser expuesta a trav\xe9s de contratos estandarizados.")),(0,n.kt)("p",null,"Un servicio expone su alcance y capacidades a trav\xe9s de un contrato de servicio. Un contrato de servicio consta de aspectos funcionales, aspectos no funcionales (como disponibilidad, tiempo de respuesta) y aspectos comerciales (como costo por llamada, t\xe9rminos y condiciones). ",(0,n.kt)("em",{parentName:"p"},"Estandarizado")," significa que los contratos de servicio deben cumplir con los est\xe1ndares de dise\xf1o del contrato."),(0,n.kt)("p",null,"Este principio aboga por que toda la funcionalidad y los datos deban ser expuestos solo a trav\xe9s de contratos de servicio estandarizados. De tal forma que los consumidores de servicios puedan comprender y acceder a dicha funcionalidad necesitando solo el contrato de servicio."),(0,n.kt)("p",null,"Este principio implica lo siguiente:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"La funcionalidad y los datos no se pueden acceder fuera de los contratos de servicio.")),(0,n.kt)("h2",{id:"consistencia"},"Consistencia"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Los servicios deben seguir una nomenclatura de campos y tipos de variable com\xfan.")),(0,n.kt)("p",null,"Este principio permite al hacer uso de estructuras de datos est\xe1ndar lo cual reduce la curva de aprendizaje de los consumidores de nuevos servicios / APIs."),(0,n.kt)("p",null,"Este principio implica lo siguiente:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Se define un conjunto de est\xe1ndares que los servicios deben cumplir."),(0,n.kt)("li",{parentName:"ul"},"Un servicio debe usar un diccionario de vocabulario com\xfan y compartido."),(0,n.kt)("li",{parentName:"ul"},"Los estilos de interacci\xf3n compatibles, la granularidad del servicio y los tipos compartidos son clave para la interoperabilidad total y la facilidad de composici\xf3n de servicios.")),(0,n.kt)("h2",{id:"externalizable"},"Externalizable"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"El servicio debe estar dise\xf1ado para que la funcionalidad que proporciona sea f\xe1cilmente externalizable.")),(0,n.kt)("p",null,"Un servicio se desarrolla para que lo utilicen consumidores que pueden ser de otro dominio o equipo, otra unidad comercial u otra empresa."),(0,n.kt)("p",null,"Este principio implica lo siguiente:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"La interfaz de servicio debe derivarse del modelo de dominios (modelo can\xf3nico)."),(0,n.kt)("li",{parentName:"ul"},"El contrato de servicio y los protocolos de acceso permitidos deben satisfacer las necesidades del consumidor."),(0,n.kt)("li",{parentName:"ul"},"La externalizaci\xf3n de un servicio no debe requerir una re-implementaci\xf3n, ni un cambio en el contrato de servicio.")),(0,n.kt)("h2",{id:"facilidad-de-consumo"},"Facilidad de Consumo"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Los servicios deben ser f\xe1ciles de usar y componer por las  aplicaciones (consumidores).")),(0,n.kt)("p",null,"Componibilidad significa que los servicios se pueden combinar f\xe1cilmente porque los contratos de servicio y los protocolos de acceso son consistentes, y cada contrato de servicio no tiene que entenderse de manera diferente."),(0,n.kt)("p",null,"Este principio implica lo siguiente:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Un contrato de servicio es f\xe1cilmente reconocible y comprensible"),(0,n.kt)("li",{parentName:"ul"},"Los contratos y protocolos de servicio son consistentes en todos los aspectos que pueden ser, p. mecanismos de identificaci\xf3n y autenticaci\xf3n, sem\xe1ntica de errores, uso de tipos comunes, paginaci\xf3n, etc."),(0,n.kt)("li",{parentName:"ul"},"Un servicio tiene un due\xf1o, de modo que los consumidores pueden comunicarse con los propietarios del servicio con respecto a los SLA, los requisitos y manejo de errores."),(0,n.kt)("li",{parentName:"ul"},"Un consumidor puede entender f\xe1cilmente los aspectos no funcionales de un servicio.")))}p.isMDXComponent=!0}}]);